import { InputGatedEventTarget } from '@miniflare/shared';
import { Plugin } from '@miniflare/shared';
import { PluginContext } from '@miniflare/shared';
import { RequestInfo as RequestInfo_2 } from '@miniflare/core';
import { RequestInit as RequestInit_2 } from '@miniflare/core';
import { Response as Response_2 } from '@miniflare/core';
import { SetupResult } from '@miniflare/shared';
import StandardWebSocket from 'ws';

declare class CloseEvent_2 extends Event {
    readonly code: number;
    readonly reason?: string | undefined;
    readonly wasClean: boolean;
    constructor(code?: number, reason?: string | undefined, wasClean?: boolean);
}
export { CloseEvent_2 as CloseEvent }

export declare function coupleWebSocket(ws: StandardWebSocket, pair: WebSocket_2): Promise<void>;

declare class ErrorEvent_2 extends Event {
    readonly error?: Error | undefined;
    constructor(error?: Error | undefined);
}
export { ErrorEvent_2 as ErrorEvent }

declare const kAccepted: unique symbol;

declare const kClose: unique symbol;

declare const kClosed: unique symbol;

declare const kCoupled: unique symbol;

declare const kPair: unique symbol;

declare class MessageEvent_2 extends Event {
    readonly data: ArrayBuffer | string;
    constructor(data: ArrayBuffer | string);
}
export { MessageEvent_2 as MessageEvent }

export declare function upgradingFetch(input: RequestInfo_2, init?: RequestInit_2): Promise<Response_2>;

declare class WebSocket_2 extends InputGatedEventTarget<WebSocketEventMap_2> {
    #private;
    [kPair]: WebSocket_2;
    [kAccepted]: boolean;
    [kCoupled]: boolean;
    [kClosed]: boolean;
    accept(): void;
    send(message: ArrayBuffer | string): void;
    close(code?: number, reason?: string): void;
    [kClose](code?: number, reason?: string): void;
}
export { WebSocket_2 as WebSocket }

declare type WebSocketEventMap_2 = {
    message: MessageEvent_2;
    close: CloseEvent_2;
    error: ErrorEvent_2;
};
export { WebSocketEventMap_2 as WebSocketEventMap }

export declare type WebSocketPair = {
    0: WebSocket_2;
    1: WebSocket_2;
};

export declare const WebSocketPair: {
    new (): WebSocketPair;
};

export declare class WebSocketPlugin extends Plugin {
    #private;
    constructor(ctx: PluginContext);
    setup(): SetupResult;
    fetch: (input: RequestInfo_2, init?: RequestInit_2 | undefined) => Promise<Response_2>;
    reload(): void;
    dispose(): void;
}

export { }

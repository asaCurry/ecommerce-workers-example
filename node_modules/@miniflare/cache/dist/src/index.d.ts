import { Awaitable } from '@miniflare/shared';
import { Clock } from '@miniflare/shared';
import { Log } from '@miniflare/shared';
import { MiniflareError } from '@miniflare/shared';
import { Plugin } from '@miniflare/shared';
import { PluginContext } from '@miniflare/shared';
import { RequestInfo as RequestInfo_2 } from '@miniflare/core';
import { Response as Response_2 } from 'undici';
import { Response as Response_3 } from '@miniflare/core';
import { SetupResult } from '@miniflare/shared';
import { Storage } from '@miniflare/shared';
import { StorageFactory } from '@miniflare/shared';

declare class Cache_2 implements CacheInterface {
    #private;
    constructor(storage: Awaitable<Storage>, formDataFiles?: boolean, clock?: Clock);
    put(req: RequestInfo_2, res: Response_2 | Response_3): Promise<undefined>;
    match(req: RequestInfo_2, options?: CacheMatchOptions): Promise<Response_3 | undefined>;
    delete(req: RequestInfo_2, options?: CacheMatchOptions): Promise<boolean>;
}
export { Cache_2 as Cache }

export declare interface CachedMeta {
    status: number;
    headers: [string, string][];
}

export declare class CacheError extends MiniflareError<CacheErrorCode> {
}

export declare type CacheErrorCode = "ERR_RESERVED";

export declare interface CacheInterface {
    put(req: RequestInfo_2, res: Response_2 | Response_3): Promise<undefined>;
    match(req: RequestInfo_2, options?: CacheMatchOptions): Promise<Response_3 | undefined>;
    delete(req: RequestInfo_2, options?: CacheMatchOptions): Promise<boolean>;
}

export declare interface CacheMatchOptions {
    ignoreMethod?: boolean;
}

export declare interface CacheOptions {
    cache?: boolean;
    cachePersist?: boolean | string;
    cacheWarnUsage?: boolean;
}

export declare class CachePlugin extends Plugin<CacheOptions> implements CacheOptions {
    #private;
    cache?: boolean;
    cachePersist?: boolean | string;
    cacheWarnUsage?: boolean;
    constructor(ctx: PluginContext, options?: CacheOptions);
    setup(storageFactory: StorageFactory): SetupResult;
    getCaches(): CacheStorage_2;
}

declare class CacheStorage_2 {
    #private;
    constructor(options: CacheOptions, log: Log, storageFactory: StorageFactory, formDataFiles?: boolean);
    get default(): CacheInterface;
    open(cacheName: string): Promise<CacheInterface>;
}
export { CacheStorage_2 as CacheStorage }

export declare class NoOpCache implements CacheInterface {
    put(_req: RequestInfo_2, _res: Response_2 | Response_3): Promise<undefined>;
    match(_req: RequestInfo_2, _options?: CacheMatchOptions): Promise<Response_3 | undefined>;
    delete(_req: RequestInfo_2, _options?: CacheMatchOptions): Promise<boolean>;
}

export { }
